```mermaid
graph TB
    subgraph "Configuration Layer"
        Config[kafka-config.yml]
        EnvVars[Environment Variables]
        Config --> Parser[Argument Parser<br/>args.ParsedArguments]
        EnvVars --> Parser
        Parser --> Validation{Config Validation}
        Validation -->|Invalid| Error[Exit with Error]
    end
    
    subgraph "Discovery Layer"
        Validation -->|Valid| DiscoveryRouter{Discovery Strategy<br/>args.DiscoveryStrategy}
        
        subgraph "Bootstrap Discovery"
            DiscoveryRouter -->|bootstrap| Bootstrap[Bootstrap Discovery<br/>broker.BootstrapBrokerDiscoverer]
            Bootstrap --> BootstrapClient[Sarama Client<br/>Bootstrap Connection]
            BootstrapClient --> Metadata[Metadata Request<br/>sarama.MetadataRequest]
            Metadata --> BrokerList[Broker List<br/>[]sarama.Broker]
        end
        
        subgraph "Zookeeper Discovery"
            DiscoveryRouter -->|zookeeper| ZK[Zookeeper Discovery<br/>zookeeper.ZookeeperDiscoverer]
            ZK --> ZKClient[ZK Client<br/>samuel/go-zookeeper]
            ZKClient --> ZKPath[Read /brokers/ids]
            ZKPath --> ZKBrokers[Parse Broker JSON]
        end
    end
```
    
    subgraph "Collection Mode Router"
        BrokerList --> ModeRouter{Collection Mode<br/>args.CollectionMode}
        ZKBrokers --> ModeRouter
        
        ModeRouter -->|all| BothModes[Run Both Modes<br/>Sequentially]
        ModeRouter -->|inventory| CoreMode[Core Collection Mode]
        ModeRouter -->|consumer_offset| OffsetMode[Offset Collection Mode]
        
        BothModes --> CoreMode
        BothModes --> OffsetMode
    end
    
    subgraph "Core Collection Mode"
        CoreMode --> BrokerWorkerPool[Broker Worker Pool<br/>Size: 3<br/>broker.Collector]
        CoreMode --> TopicWorkerPool[Topic Worker Pool<br/>Size: 5<br/>topic.Collector]
        CoreMode --> ProducerWorkerPool[Producer Worker Pool<br/>Size: 3<br/>client.ProducerCollector]
        CoreMode --> ConsumerWorkerPool[Consumer Worker Pool<br/>Size: 3<br/>client.ConsumerCollector]
        
        BrokerWorkerPool --> JMXPool[JMX Connection Pool<br/>connection.JMXClient]
        TopicWorkerPool --> JMXPool
        ProducerWorkerPool --> JMXPool
        ConsumerWorkerPool --> JMXPool
        
        JMXPool --> NRJMX[nrjmx Tool<br/>/usr/bin/nrjmx]
        NRJMX --> JMXEndpoint[JMX/RMI Endpoint<br/>Port: 9999]
    end
    
    subgraph "Offset Collection Mode"
        OffsetMode --> OffsetCollector[Offset Collector<br/>consumeroffset.Collector]
        OffsetCollector --> KafkaAdmin[Kafka Admin Client<br/>sarama.ClusterAdmin]
        KafkaAdmin --> ConsumerGroups[List Consumer Groups]
        ConsumerGroups --> GroupCoordinator[Group Coordinator<br/>sarama.ConsumerGroupCoordinator]
        GroupCoordinator --> OffsetFetch[Fetch Offsets<br/>sarama.OffsetFetchRequest]
        GroupCoordinator --> TopicMetadata[Topic Metadata<br/>Partition Details]
        
        OffsetFetch --> LagCalc[Lag Calculation<br/>logEndOffset - committedOffset]
        TopicMetadata --> LagCalc
    end
    
    subgraph "Data Processing Layer"
        JMXEndpoint --> MBeanData[MBean Data<br/>Raw JMX Metrics]
        LagCalc --> OffsetData[Offset Data<br/>Consumer Lag Info]
        
        MBeanData --> Transform[Metric Transformation<br/>Unit Conversion, Aggregation]
        OffsetData --> Transform
        
        Transform --> Enrichment[Data Enrichment<br/>Add Cluster Name, Tags]
        Enrichment --> Filtering[Data Filtering<br/>Apply Include/Exclude Rules]
    end
    
    subgraph "Output Layer"
        Filtering --> SampleBuilder[Sample Builder<br/>integration.Entity.NewMetricSet()]
        
        SampleBuilder --> BrokerSample[KafkaBrokerSample]
        SampleBuilder --> TopicSample[KafkaTopicSample]
        SampleBuilder --> ProducerSample[KafkaProducerSample]
        SampleBuilder --> ConsumerSample[KafkaConsumerSample]
        SampleBuilder --> OffsetSample[KafkaOffsetSample]
        
        BrokerSample --> JSONMarshaller[JSON Marshaller<br/>sdk.Integration.Publish()]
        TopicSample --> JSONMarshaller
        ProducerSample --> JSONMarshaller
        ConsumerSample --> JSONMarshaller
        OffsetSample --> JSONMarshaller
        
        JSONMarshaller --> STDOUT[STDOUT<br/>JSON Protocol v3]
        STDOUT --> InfraAgent[NR Infrastructure Agent]
        InfraAgent --> NRPlatform[New Relic Platform]
    end
    
    style CoreMode fill:#e1f5fe
    style OffsetMode fill:#fff3e0
    style JMXPool fill:#f3e5f5
    style Transform fill:#e8f5e9
```
